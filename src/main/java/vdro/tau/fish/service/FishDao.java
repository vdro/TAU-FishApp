package vdro.tau.fish.service;

import vdro.tau.fish.domain.Fish;

import org.springframework.stereotype.Service;
import java.sql.*;

import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;


@Service
public class FishDao implements FishServiceManager {

    private DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");

    private Connection connection;

    private PreparedStatement addFishStmt;
    private PreparedStatement getAllFishStmt;
    private PreparedStatement deleteFishStmt;
    private PreparedStatement getFishStmt;
    private PreparedStatement updateFishStmt;
    private PreparedStatement deleteAllFishStmt;

    public FishDao(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }

    public FishDao() throws SQLException {
        this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
        if (!isDatabaseReady()) {
            createTables();
        }
        this.setConnection(this.connection);
    }

    public void createTables() throws SQLException {
        connection.createStatement()
                .executeUpdate("CREATE TABLE "
                        +"Fish(Id bigint GENERATED BY DEFAULT AS IDENTITY, "
                        +"Label varchar(30) NOT NULL, "
                        +"Name varchar(30) NOT NULL, "
                        +"Description varchar(255), "
                        +"CategoryId integer NOT NULL, "
                        +"Quantity integer NOT NULL, "
                        +"NetPrice numeric(12,2) NOT NULL, "
                        +"GrossPrice numeric(12,2) NOT NULL, "
                        +"FakeFish boolean NOT NULL)");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Fish".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addFishStmt = connection.prepareStatement(
                "INSERT INTO Fish (Label, Name, Description, CategoryId, Quantity, NetPrice, GrossPrice, FakeFish) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                Statement.RETURN_GENERATED_KEYS);

        deleteFishStmt = connection.prepareStatement("DELETE FROM Fish WHERE Id = ?");
        deleteAllFishStmt = connection.prepareStatement("DELETE FROM Fish");
        getAllFishStmt = connection.prepareStatement("SELECT * FROM Fish ORDER BY Id");
        getFishStmt = connection.prepareStatement("SELECT * FROM Fish WHERE Id = ?");
        updateFishStmt = connection.prepareStatement("UPDATE Fish SET Label=?, Name=?, Description=?, CategoryId=?, Quantity=?, NetPrice=?, GrossPrice=?, FakeFish=? WHERE Id=?");
    }

    @Override
    public Integer create(Fish fish) throws IllegalStateException {
        int count = 0;
        try {
            addFishStmt.setString(1, fish.getLabel());
            addFishStmt.setString(2, fish.getName());
            addFishStmt.setString(3, fish.getDescription());
            addFishStmt.setInt(4, fish.getCategoryId());
            addFishStmt.setInt(5, fish.getQuantity());
            addFishStmt.setFloat(6, fish.getNetPrice());
            addFishStmt.setFloat(7, fish.getGrossPrice());
            addFishStmt.setBoolean(8, fish.isFakeFish());
            count = addFishStmt.executeUpdate();
            ResultSet generatedKeys = addFishStmt.getGeneratedKeys();
            if(generatedKeys.next()) {
                fish.setId(generatedKeys.getInt(1));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    @Override
    public List<Fish> getAll() {
        List<Fish> FishList = new LinkedList<>();
        try {
            ResultSet rs = getAllFishsStmt.executeQuery();
            while(rs.next()) {
                Fish p = new Fish();
                p.setId(rs.getInt("Id"));
                p.setLabel(rs.getString("Label"));
                p.setName(rs.getString("Name"));
                p.setDescription(rs.getString("Description"));
                p.setCategoryId(rs.getInt("CategoryId"));
                p.setQuantity(rs.getInt("Quantity"));
                p.setNetPrice(rs.getFloat("NetPrice"));
                p.setGrossPrice(rs.getFloat("GrossPrice"));
                p.setFakeFish(rs.getBoolean("FakeFish"));

                FishList.add(p);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return FishList;
    }

    @Override
    public Fish get(int Id) throws SQLException {
        try {
            getFishStmt.setLong(1, Id);
            ResultSet rs = getFishStmt.executeQuery();

            if (rs.next()) {
                Fish p = new Fish();
                p.setId(rs.getInt("Id"));
                p.setLabel(rs.getString("Label"));
                p.setName(rs.getString("Name"));
                p.setDescription(rs.getString("Description"));
                p.setCategoryId(rs.getInt("CategoryId"));
                p.setQuantity(rs.getInt("Quantity"));
                p.setNetPrice(rs.getFloat("NetPrice"));
                p.setGrossPrice(rs.getFloat("GrossPrice"));
                p.setFakeFish(rs.getBoolean("FakeFish"));
                return p;
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        throw new SQLException("Something go wrong! In the database not found record with id:" + Id);
    }

    @Override
    public Integer update(Fish fish) throws SQLException {
        int count = 0;
        try {
            updateFishStmt.setString(1, fish.getLabel());
            updateFishStmt.setString(2, fish.getName());
            updateFishStmt.setString(3, fish.getDescription());
            updateFishStmt.setInt(4, fish.getCategoryId());
            updateFishStmt.setInt(5, fish.getQuantity());
            updateFishStmt.setFloat(6, fish.getNetPrice());
            updateFishStmt.setFloat(7, fish.getGrossPrice());
            updateFishStmt.setBoolean(8, fish.isFakeFish());
            updateFishStmt.setInt( 9, fish.getId());
            count = updateFishStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        if (count <= 0)
            throw new SQLException("No records has been updated.");
        return count;
    }

    @Override
    public Integer delete(Long Id) throws SQLException {
        try {
            deleteFishStmt.setLong(1, Id);
            return deleteFishStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }
}
